name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  # Permet le déclenchement manuel du job 'deploy' depuis l'interface GitHub Actions
  workflow_dispatch:

jobs:
  # ==========================================
  # Job: Test
  # ==========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Optionnel: Linting/Formatting
    # - name: Lint code
    #   run: npm run lint
    # - name: Check formatting
    #   run: npm run format:check

    - name: Start test services
      run: docker compose -f src/tests/docker-compose.yml up -d

    - name: Wait for services
      run: |
        echo "Waiting for database..."
        retries=20
        # Remplacez 'db' par le nom de votre service DB dans src/tests/docker-compose.yml si nécessaire
        until docker compose -f src/tests/docker-compose.yml exec -T db mysqladmin ping -h "localhost" --silent || [ $retries -eq 0 ]; do
          echo "Waiting... ($retries retries left)"
          sleep 5
          ((retries--))
        done
        if [ $retries -eq 0 ]; then
          echo "Database did not start in time."
          docker compose -f src/tests/docker-compose.yml logs
          exit 1
        fi
        echo "Database is ready!"

    - name: Run tests
      run: npm test
      env:
        CI: true
        # Assurez-vous que les variables d'env pointent vers les services docker-compose
        # (ex: DB_HOST=localhost, DB_PORT=port_exposé_par_compose)

    - name: Stop test services
      if: always()
      run: docker compose -f src/tests/docker-compose.yml down -v

  # ==========================================
  # Job: Build and Push Docker Image
  # ==========================================
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # Ne s'exécute que sur push vers 'main' et après succès du job 'test'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # Utilise le token fourni automatiquement par GitHub Actions
          username: ${{ github.actor }} # L'utilisateur qui a déclenché le workflow
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Construit le nom de l'image pour GHCR: ghcr.io/owner/repo
          # Vous pouvez ajouter un nom d'image spécifique si besoin: ghcr.io/${{ github.repository }}/api
          images: ghcr.io/${{ github.repository }} # Ex: ghcr.io/adamsbarry18/api.template.node
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # Job: Deploy (Manual Trigger)
  # ==========================================
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    # Ne s'exécute que sur déclenchement manuel ('workflow_dispatch')
    # et après succès du job 'build-and-push-docker' (donc implicitement sur 'main')
    if: github.event_name == 'workflow_dispatch'
    needs: build-and-push-docker

    environment: production # Optionnel: Définit un environnement pour les secrets/règles

    steps:
      - name: Checkout repository (si nécessaire pour les scripts de déploiement)
        uses: actions/checkout@v4
        with:
          ref: main # Assurez-vous de déployer depuis main

      - name: Placeholder for Deployment Steps
        run: |
          echo "Deployment triggered manually for branch: ${{ github.ref }}"
          echo "Image to deploy (example): ghcr.io/${{ github.repository }}:latest" # Nom d'image GHCR
          echo "Add your deployment steps here (e.g., SSH, kubectl, serverless deploy, etc.)"
          # Exemple:
          # ssh user@your-server "docker pull your-image:latest && docker stop your-container && docker rm your-container && docker run -d --name your-container your-image:latest"
          # kubectl set image deployment/your-deployment your-container=your-image:latest -n your-namespace